ADD_PRO:
	LDX		#(BUF1+FD-RAM)
	JSR		ADJ_FD_INC
	LDX		#(BUF2+FD-RAM)
	JSR		ADJ_FD_INC
ADD_PRO_LOOP:
	LDA		BUF1+FD
	AND		#07FH
	STA		BUF6
	LDA		BUF2+FD
	AND		#07FH
	CMP		BUF6
	BEQ		ADD_PRO_CALC
	BCS		ADD_PRO_BUF1_LEFT
ADD_PRO_BUF2_LEFT:	
	LDX		#(BUF2-RAM)
	JSR		MOVL_1DIG
	INC		BUF2+FD
	BRA		ADD_PRO_LOOP
ADD_PRO_BUF1_LEFT:
	LDX		#(BUF1-RAM)
	JSR		MOVL_1DIG
	INC		BUF1+FD
	BRA		ADD_PRO_LOOP
ADD_PRO_CALC:
	LDA		BUF1+FD
	EOR		BUF2+FD
	AND		#080H
	BEQ		ADD_PRO_CALC_ADD
ADD_PRO_CALC_SUB:
	SED
	LDX		#(BUF2-RAM)			;2->5
	JSR		COPY_BUF5
	LDX		#(BUF1-RAM)			;1-5?
	JSR		SUBS_BUF5
	BCS		ADD_PRO_CALC_SUB_1
	SED
	LDX		#(BUF1-RAM)			;1->5
	JSR		COPY_BUF5
	LDX		#(BUF2-RAM)			;2=2-5		
	JSR		SUB_BUF5_BUFX
	BRA		ADD_PRO_CALC_END	
ADD_PRO_CALC_SUB_1:
	SED
	LDX		#(BUF1-RAM)			;1->2
	JSR		COPY_BUF2
	LDX		#(BUF2-RAM)			;2=2-5		
	JSR		SUB_BUF5_BUFX
	LDA		BUF1+FD
	STA		BUF2+FD
	BRA		ADD_PRO_CALC_END
ADD_PRO_CALC_ADD:
	SED
	LDX		#(BUF1-RAM)
	JSR		ADD_BUF2_BUF2
ADD_PRO_CALC_END:
	JMP		BUF2_ADJ_RESULT
;=====================================================================
SUB_PRO:
	LDA		BUF1+FD
	EOR		#080H
	STA		BUF1+FD
	JMP		ADD_PRO
MUL:
	CLD
	LDX		#(BUF3-RAM)
	JSR		CLR_BUF
	LDA		#(MAX_DIG*4+1)
	STA		BUF6
MUL_LOOP:
	DEC		BUF6
	BEQ		MUL_END
	LDX		#(BUF1-RAM)
	JSR		MOVR_1BIT
	BCC		MUL_LOOP_1
	LDX		#(BUF2-RAM)
	JSR		ADD_BUF3_BUF3
MUL_LOOP_1:
	LDX		#(BUF2-RAM)
	JSR		MOVL_1BIT
	BRA		MUL_LOOP
MUL_END:
	RTS
;---------------------------------------
MUL_PRO:
	LDX		#(BUF2-RAM)
	JSR		COPY_BUF5
	JSR		DEC2HEX
	LDX		#(BUF5-RAM)
	JSR		COPY_BUF1
	LDX		#(BUF2-RAM)
	JSR		COPY_BUF5
	JSR		DEC2HEX
	LDX		#(BUF5-RAM)
	JSR		COPY_BUF1
	JSR		MUL
	LDX		#(BUF3-RAM)
	JSR		COPY_BUF1
	JSR		HEX2DEC
	;-----------------------------------
	LDX		#(BUF1+FD-RAM)
	JSR		ADJ_FD_DEC
	LDX		#(BUF2+FD-RAM)
	JSR		ADJ_FD_DEC
	CLD
	CLC
	LDA		BUF1+FD
	ADC		BUF2+FD
	STA		BUF2+FD
	INC		BUF2+FD
	JMP		BUF2_ADJ_RESULT
;=====================================================================
DIV:
	CLD
	LDX		#(BUF1-RAM)
	JSR		CLR_BUF
	LDA		#0
	STA		BUF6+1
	LDA		#2
	STA		BUF6
DIV_LOOP:
	LDA		BUF5+MAX_DIG-1
	AND		#080H
	BNE		DIV_LOOP_1
	INC		BUF6
	LDX		#(BUF5-RAM)
	JSR		MOVL_1BIT
	BRA		DIV_LOOP
DIV_LOOP_1:
	DEC		BUF6
	BEQ		DIV_END
	LDX		#(BUF1-RAM)
	JSR		MOVL_1BIT
	LDX		#(BUF2-RAM)
	JSR		SUBS_BUF5
	LDA		BUF6+1
	SBC		#0
	BCC		DIV_LOOP_2
	LDX		#(BUF2-RAM)
	JSR		SUB_BUF5_BUFX
	LDA		BUF6+1
	SBC		#0
	STA		BUF6+1
	INC		BUF1
DIV_LOOP_2:
	LDX		#(BUF2-RAM)
	JSR		MOVL_1BIT
	ROL		BUF6+1
	BRA		DIV_LOOP_1
DIV_END:
	RTS
;---------------------------------------
DIV_PRO:
	JSR		JUDGE_BUF1
	BEQ		DIV_PRO_ERR
	JSR		JUDGE_BUF2
	BEQ		DIV_PRO_0
	BRA		DIV_PRO_DIV_INIT
DIV_PRO_ERR:
	LDA		ERR_DIV0
	STA		ERR
DIV_PRO_0:
	LDX		#(BUF2-RAM)
	JSR		CLR_BUF
	LDA		#0
	STA		BUF2+FD
	RTS
DIV_PRO_DIV_INIT:	
	LDX		#(BUF1+FD-RAM)
	JSR		ADJ_FD_INC
	LDX		#(BUF2+FD-RAM)
	JSR		ADJ_FD_INC
DIV_PRO_DIV_LOOP:
	LDA		BUF2+5
	AND		#0F0H
	BNE		DIV_PRO_DIV
	LDX		#(BUF2-RAM)
	JSR		MOVL_1DIG
	INC		BUF2+FD
	BRA		DIV_PRO_DIV_LOOP
DIV_PRO_DIV:
	LDX		#(BUF2-RAM)
	JSR		MOVL_12DIG
	LDX		#(BUF2-RAM)
	JSR		COPY_BUF5
	JSR		DEC2HEX
	LDX		#(BUF5-RAM)
	JSR		COPY_BUF1
	LDX		#(BUF2-RAM)
	JSR		COPY_BUF5
	JSR		DEC2HEX
	JSR		DIV
	JSR		HEX2DEC
	;-----------------------------------	
	LDA		BUF2+FD
	AND		#07FH
	STA		BUF6
	LDA		BUF2+FD
	AND		#080H
	STA		BUF6+1
	LDA		BUF1+FD
	AND		#07FH
	STA		BUF6+2
	LDA		BUF1+FD
	AND		#080H
	STA		BUF6+3
	;-----------------------------------
	CLD
	CLC
	LDA		#MAX_DIG+1
	ADC		BUF6
	SEC
	SBC		BUF6+2
	STA		BUF2+FD
	LDA		BUF6+1
	EOR		BUF6+3
	ORA		BUF2+FD
	STA		BUF2+FD
	JMP		BUF2_ADJ_RESULT    
	BUF2 对计算结果进行调整
BUF1_ADJ_RESULT:
	LDA		#(BUF1+FD-RAM)
	STA		BUF6
	LDA		#(BUF1-RAM)
	STA		BUF6+1	
	BRA		ADJ_RESULT
BUF2_ADJ_RESULT:
	LDA		#(BUF2+FD-RAM)
	STA		BUF6
	LDA		#(BUF2-RAM)
	STA		BUF6+1
	;-----------------------------------
ADJ_RESULT:
	LDX		BUF6						;LDA FD
	JSR		ADJ_FD_INC
ADJ_RESULT_LOOP:
	;-----------------------------------
	;if dot > max dig
	LDX		BUF6						;LDA FD
	LDA		RAM, X
	AND		#07FH
	CLD
	SEC
	SBC		#MAX_DIG+1
	BCS		ADJ_RESULT_MOVR				;如果计算小数点大于最大显示小数点，调整
	LDA		ERR
	BNE		ADJ_RESULT_LOOP1			;如果有错误，不进行末位为0值的调整
	LDX		BUF6+1						;LDA BUF
	LDA		RAM, X
	AND		#0FH
	BNE		ADJ_RESULT_LOOP1
	LDX		BUF6						;LDA FD
	LDA		RAM, X
	AND		#07FH
	CMP		#1
	BNE		ADJ_RESULT_MOVR				;如果最末位数为0值且小数点不为1，调整
ADJ_RESULT_LOOP1:
	LDX		BUF6+1						;JUDGE BUFH
	LDA		RAM+6, X
	ORA		RAM+7, X
	ORA		RAM+8, X
	ORA		RAM+9, X
	ORA		RAM+10, X
	ORA		RAM+11, X
	BNE		ADJ_RESULT_MOVR				;如果高位还有值，调整
	BRA		ADJ_RESULT_ZERO
ADJ_RESULT_MOVR:
	LDX		BUF6+1						;LDX BUF
	JSR		MOVR_1DIG
	LDX		BUF6						;LDA FD
	LDA		RAM, X
	AND		#07FH
	CMP		#1
	BEQ		ADJ_RESULT_ERR
	LDX		BUF6						;DEC FD
	LDA		RAM, X
	STA		BUF6+2
	DEC		BUF6+2
	LDA		BUF6+2
	STA		RAM, X	
	BRA		ADJ_RESULT_LOOP
ADJ_RESULT_ERR:
	LDX		BUF6						;LDA FD
	LDA		RAM, X
	AND		#080H
	ORA		#MAX_DIG
	LDX		BUF6						;STA FD
	STA		RAM, X
	LDA		#ERR_FULL
	STA		ERR
	BRA		ADJ_RESULT_LOOP
ADJ_RESULT_ZERO:
	LDX		BUF6+1						;JUDGE BUFL
	LDA		RAM, X
	ORA		RAM+1, X
	ORA		RAM+2, X
	ORA		RAM+3, X
	ORA		RAM+4, X
	ORA		RAM+5, X
	BNE		ADJ_RESULT_END
	LDA		#0
	LDX		BUF6						;STA FD
	STA		RAM, X
ADJ_RESULT_END:
	RTS	

